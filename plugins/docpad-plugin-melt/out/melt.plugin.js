// Generated by CoffeeScript 1.6.3
(function() {
  var fs, handlers, meltPlugin, pluginUrl, plugins, runHandlers, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require("fs");

  _ = require("underscore");

  pluginUrl = "" + __dirname + "/plugins";

  plugins = [];

  handlers = {};

  (fs.readdirSync(pluginUrl)).forEach(function(url) {
    return plugins.push(require(pluginUrl + "/" + url));
  });

  meltPlugin = {
    name: "melt"
  };

  runHandlers = function(eventType, opts, next) {
    var i, methods, runHandler, _this;
    i = 0;
    _this = this;
    methods = handlers[eventType];
    runHandler = function() {
      if (i === methods.length) {
        return next();
      } else {
        return methods[i++].call(_this, opts, runHandler);
      }
    };
    if (methods && methods.length > 0) {
      return methods[i++].call(_this, opts, runHandler);
    } else {
      return next();
    }
  };

  plugins.forEach(function(item) {
    var eventType, method, _ref, _results;
    _ref = item.events;
    _results = [];
    for (eventType in _ref) {
      if (!__hasProp.call(_ref, eventType)) continue;
      method = _ref[eventType];
      handlers[eventType] || (handlers[eventType] = []);
      meltPlugin[eventType] || (meltPlugin[eventType] = (function(type) {
        return function(opts, next) {
          return runHandlers.call(this, type, opts, next);
        };
      })(eventType));
      _results.push(handlers[eventType].push(method));
    }
    return _results;
  });

  module.exports = function(BasePlugin) {
    var MeltPlugin, _ref;
    MeltPlugin = (function(_super) {
      __extends(MeltPlugin, _super);

      function MeltPlugin() {
        _ref = MeltPlugin.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return MeltPlugin;

    })(BasePlugin);
    _.extend(MeltPlugin.prototype, meltPlugin);
    return MeltPlugin;
  };

}).call(this);
